"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSocket = exports.fixtureStop = exports.fixtureStart = void 0;
const express_1 = __importDefault(require("express"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const socket_io_1 = require("socket.io");
const server_destroy_1 = __importDefault(require("server-destroy"));
const index_1 = require("../../index");
const socket = {
    io: null,
    init(httpServer) {
        socket.io = new socket_io_1.Server(httpServer);
    }
};
let server = null;
const fixtureStart = async (done, options = { secret: 'super secret' }) => {
    const profile = {
        email: 'john@doe.com',
        id: 123,
        checkField: true
    };
    let keySecret = '';
    if (typeof options.secret === 'string') {
        keySecret = options.secret;
    }
    else {
        keySecret = await options.secret({ header: { alg: 'HS256' }, payload: profile });
    }
    const app = express_1.default();
    app.use(express_1.default.json());
    app.post('/login', (_req, res) => {
        const token = jsonwebtoken_1.default.sign(profile, keySecret, {
            expiresIn: 60 * 60 * 5
        });
        return res.json({ token });
    });
    app.post('/login-wrong', (_req, res) => {
        profile.checkField = false;
        const token = jsonwebtoken_1.default.sign(profile, keySecret, {
            expiresIn: 60 * 60 * 5
        });
        return res.json({ token });
    });
    server = app.listen(9000, done);
    socket.init(server);
    socket.io?.use(index_1.authorize(options));
    server_destroy_1.default(server);
};
exports.fixtureStart = fixtureStart;
const fixtureStop = (callback) => {
    socket.io?.close();
    try {
        server?.destroy();
    }
    catch { }
    callback();
};
exports.fixtureStop = fixtureStop;
const getSocket = () => {
    return socket.io;
};
exports.getSocket = getSocket;
